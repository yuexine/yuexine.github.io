{"pages":[],"posts":[{"title":"Jenkins集成Helm进行应用持续发布","text":"目标 在开发过程中，对开发的应用版本进行持续迭代并且发布到kubernetes集群中 使用Helm工具以chart升级的方式完成不同版本应用的发布升级 前提 在使用Helm之前，已经完成了Jenkins的部署，并且已经正常运行脚本与Kubernetes平台进行 通过kubectl命令执行配置文件完成应用的版本更新 实现步骤 helm chart制作，此步骤略 包含helm工具的jenkins容器镜像制作 制作完成的镜像文件 harbor.3incloud.com/library/jenkins-jnlp:latest 初始化应用安装 helm init --client-only &amp;&amp; helm repo add --username jenkins --password password myharbor https://harbor.3incloud.com/chartrepo/XXXX &amp;&amp; helm repo update 这里主要就是在slave中初始化helm，并且添加私有的chart仓库 Jenkins完成应用持续部署 helm upgrade --reuse-values --set-string image.tag='${build_tag}' deploy-name --version 0.1.0 myharbor/chart-name 通过重新设定chart的image.tag完成容器的版本升级，--reuse-values 表示在原本参数的基础上进行更新 完整的Pipeline脚本123456789101112131415161718192021222324252627node('worker') { stage('Clone') { echo \"1.Clone Stage\" git credentialsId: 'gitlab-auth', url: 'https://gitlab.3incloud.com/xxx/xxx-server.git' script { build_tag = sh(returnStdout: true, script: 'git rev-parse --short HEAD').trim() } } stage('Test') { echo \"2.Test Stage\" } stage('Build') { echo \"3.Build Docker Image Stage\" sh \"docker build -t harbor.3incloud.com/xxx/xxx-server:${build_tag} .\" } stage('Push') { echo \"4.Push Docker Image Stage\" withDockerRegistry(credentialsId: 'harbor-ci', url: 'https://harbor.3incloud.com') { sh \"docker push harbor.3incloud.com/xxx/xxx-server:${build_tag}\" } } stage('Deploy') { echo \"5. Deploy Stage\" sh \"helm init --client-only &amp;&amp; helm repo add --username jenkins --password password myharbor https://harbor.3incloud.com/chartrepo/xxx &amp;&amp; helm repo update\" sh \"helm upgrade --reuse-values --set-string image.tag='${build_tag}' avic-server --version 0.1.0 myharbor/xxx-server\" }}","link":"/2019/04/25/Jenkins集成Helm进行应用持续发布/"},{"title":"Spring Cloud Config Server","text":"功能 基于rest形式提供额外的配置（键值对或yaml文本） 配置值的加解密（对称或非对称） 与springboot继承简单 环境仓库你的配置数据应该存放在哪里？Spring Cloud Config提供了多种策略，比如可以是filesystem，git，vault等，这里我们使用git管理我们的配置数据 Config Server如何做到管理应用的多个环节配置呢，它主要是用了以下三个变量来对配置数据进行区分 {application} 对应到客户端的spring.application.name {profile} 对应到客户端spring.application.profile {label} 这是服务端标记版本化的配置文件集合 这样客户端spring boot应用在启动的时候通过指定应用启动的参数，从而获取对应的配置数据 一个客户端应用程序引导配置示例 12345spring: application: name: foo profiles: active: dev，mysql 使用git作为存储库的一些配置 123456789101112spring: cloud: config: server: git: uri: https：//example.com/my/{application} # 占位符 skipSslValidation: true # 跳过ssl证书验证，默认false timeout: 4 # 超时时间（秒） username: user password: pw # 配置认证 searchPaths: '{application}' # 带占位符的搜索路径 refreshRate: 0 # 刷新频率，0表示每次请求都会获取最新的配置 健康指标Config Server附带一个运行状况指示器，用于检查配置EnvironmentRepository是否正常，默认情况下指示器请求的{application}是app，{profile}是default 配置健康指示器 1234567891011spring: cloud: config: server: health: repositories: myservice: label: mylabel myservice-dev: name: myservice profiles: development 如果想要禁用健康检查需要设置 spring.cloud.config.server.health.enabled=false 另外在配置健康检查之后，如果需要获取详细的健康指标数据还需要做额外的配置 12345678management: endpoints: enabled-by-default: true web: base-path: /admin endpoint: health: show-details: always # 显示详细数据 安全通过集成spring-boot-starter-security使用默认的HTTP Basic来保护配置数据 配置用户名密码 12345spring: security: user: name: yuexin password: XXX 加密与解密不想看了，用的的时候再去看文档 附上完整的配置 123456789101112131415161718192021222324252627282930spring: application: name: clivia-config-server cloud: config: server: git: uri: https://github.com/yuexine/cloud-repo.git username: yuexine password: XXX search-paths: clivia health: repositories: cloud-repo: name: foo profiles: dev security: user: name: yuexin password: XXXserver: port: 8888management: endpoints: enabled-by-default: true web: base-path: /admin endpoint: health: show-details: always 参考: 官方文档-基于版本2.1.0.RELEASE Spring cloud config Actuator健康监测","link":"/2019/05/06/Spring-Cloud-Config-Server/"},{"title":"Hello World","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","link":"/2019/04/24/hello-world/"},{"title":"test_my_site","text":"","link":"/2019/04/24/test-my-site/"}],"tags":[{"name":"jenkins","slug":"jenkins","link":"/tags/jenkins/"},{"name":"helm","slug":"helm","link":"/tags/helm/"},{"name":"spring","slug":"spring","link":"/tags/spring/"},{"name":"spring-cloud","slug":"spring-cloud","link":"/tags/spring-cloud/"}],"categories":[{"name":"DevOps","slug":"DevOps","link":"/categories/DevOps/"},{"name":"Spring-Cloud","slug":"Spring-Cloud","link":"/categories/Spring-Cloud/"}]}